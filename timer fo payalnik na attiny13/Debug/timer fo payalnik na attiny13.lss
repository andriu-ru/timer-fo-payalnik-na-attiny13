
timer fo payalnik na attiny13.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000025a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800060  00800060  000002ce  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002ce  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000300  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  0000033c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000577  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000404  00000000  00000000  000008eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000041f  00000000  00000000  00000cef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000068  00000000  00000000  00001110  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002eb  00000000  00000000  00001178  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f3  00000000  00000000  00001463  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001556  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	16 c0       	rjmp	.+44     	; 0x30 <__bad_interrupt>
   4:	15 c0       	rjmp	.+42     	; 0x30 <__bad_interrupt>
   6:	14 c0       	rjmp	.+40     	; 0x30 <__bad_interrupt>
   8:	13 c0       	rjmp	.+38     	; 0x30 <__bad_interrupt>
   a:	12 c0       	rjmp	.+36     	; 0x30 <__bad_interrupt>
   c:	12 c0       	rjmp	.+36     	; 0x32 <__vector_6>
   e:	10 c0       	rjmp	.+32     	; 0x30 <__bad_interrupt>
  10:	0f c0       	rjmp	.+30     	; 0x30 <__bad_interrupt>
  12:	0e c0       	rjmp	.+28     	; 0x30 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_clear_bss>:
  1c:	20 e0       	ldi	r18, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	01 c0       	rjmp	.+2      	; 0x26 <.do_clear_bss_start>

00000024 <.do_clear_bss_loop>:
  24:	1d 92       	st	X+, r1

00000026 <.do_clear_bss_start>:
  26:	a2 37       	cpi	r26, 0x72	; 114
  28:	b2 07       	cpc	r27, r18
  2a:	e1 f7       	brne	.-8      	; 0x24 <.do_clear_bss_loop>
  2c:	76 d0       	rcall	.+236    	; 0x11a <main>
  2e:	13 c1       	rjmp	.+550    	; 0x256 <_exit>

00000030 <__bad_interrupt>:
  30:	e7 cf       	rjmp	.-50     	; 0x0 <__vectors>

00000032 <__vector_6>:
#define comparaisonOCR0A 145 // значениие записанное в регистр OCR0A для срабатывания таймера счетчика по совпадению
#define interval_1 1800 // значение временного интервала 1 (30 минут) (при задании временного интервала нужно учитывать погрешность внутреннего RC генератора)
#define interval_2 3600 // значение временного интервала 2 (60 минут) (при задании временного интервала нужно учитывать погрешность внутреннего RC генератора)

ISR(TIM0_COMPA_vect) // вектор прерывания по совпадению с регистром OCR0A
{
  32:	1f 92       	push	r1
  34:	0f 92       	push	r0
  36:	0f b6       	in	r0, 0x3f	; 63
  38:	0f 92       	push	r0
  3a:	11 24       	eor	r1, r1
  3c:	8f 93       	push	r24
  3e:	9f 93       	push	r25
		ui30or60inits++; // заходя в прерывание инкрементируем переменнную на 1
  40:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <ui30or60inits>
  44:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <ui30or60inits+0x1>
  48:	01 96       	adiw	r24, 0x01	; 1
  4a:	90 93 71 00 	sts	0x0071, r25	; 0x800071 <ui30or60inits+0x1>
  4e:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <ui30or60inits>
		TCNT0 = 0; // обнуляем таймер-счетчик чтобы он считал с начала и мы могли получить интервалы времени равные примерно одной секунде
  52:	12 be       	out	0x32, r1	; 50
}
  54:	9f 91       	pop	r25
  56:	8f 91       	pop	r24
  58:	0f 90       	pop	r0
  5a:	0f be       	out	0x3f, r0	; 63
  5c:	0f 90       	pop	r0
  5e:	1f 90       	pop	r1
  60:	18 95       	reti

00000062 <beeper>:
/************************* функция звукового сигнала, зуммер подключается на прот PB5 нога RESET ************************************/
/************************************************************************************************************************************/

void beeper (char t_sound) // функция отвечает за звуковые сигналы
{
	for (char i=0; i<t_sound; i++)
  62:	88 23       	and	r24, r24
  64:	61 f0       	breq	.+24     	; 0x7e <beeper+0x1c>
  66:	20 e0       	ldi	r18, 0x00	; 0
	{
		PORTB ^= (1<<PB5);
  68:	30 e2       	ldi	r19, 0x20	; 32
  6a:	98 b3       	in	r25, 0x18	; 24
  6c:	93 27       	eor	r25, r19
  6e:	98 bb       	out	0x18, r25	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	9c e0       	ldi	r25, 0x0C	; 12
  72:	9a 95       	dec	r25
  74:	f1 f7       	brne	.-4      	; 0x72 <beeper+0x10>
  76:	00 c0       	rjmp	.+0      	; 0x78 <beeper+0x16>
/************************* функция звукового сигнала, зуммер подключается на прот PB5 нога RESET ************************************/
/************************************************************************************************************************************/

void beeper (char t_sound) // функция отвечает за звуковые сигналы
{
	for (char i=0; i<t_sound; i++)
  78:	2f 5f       	subi	r18, 0xFF	; 255
  7a:	82 13       	cpse	r24, r18
  7c:	f6 cf       	rjmp	.-20     	; 0x6a <beeper+0x8>
  7e:	08 95       	ret

00000080 <setupMk>:

void setupMk(void) // функция содержит все настройки процессора
{
	/************ настройка пинов процессора ****************/
	
	DDRB &= ~((1<<PB1)|(1<<PB0)); // настраиваем пины 0,1 на вход
  80:	87 b3       	in	r24, 0x17	; 23
  82:	8c 7f       	andi	r24, 0xFC	; 252
  84:	87 bb       	out	0x17, r24	; 23
	DDRB |= (1<<PB4)|(1<<PB3)|(1<<PB2)|(1<<PB5); // настраиваем пины 2,3,4 на выход (включая ноги ресет)
  86:	87 b3       	in	r24, 0x17	; 23
  88:	8c 63       	ori	r24, 0x3C	; 60
  8a:	87 bb       	out	0x17, r24	; 23
	
	PORTB |= (1<<PB1)|(1<<PB0); // подаем на пины 0,1 высокий уровень
  8c:	88 b3       	in	r24, 0x18	; 24
  8e:	83 60       	ori	r24, 0x03	; 3
  90:	88 bb       	out	0x18, r24	; 24
	PORTB &= ~((1<<PB5)|(1<<PB4)|(1<<PB3)|(1<<PB2)); //подаем на пины 2,3,4 низкий уровень (включая ноги ресет)
  92:	88 b3       	in	r24, 0x18	; 24
  94:	83 7c       	andi	r24, 0xC3	; 195
  96:	88 bb       	out	0x18, r24	; 24
	
	/************ настройка делителя частоты МК ****************/
	
	CLKPR=0x80; // настройка делителя частоты МК 128
  98:	80 e8       	ldi	r24, 0x80	; 128
  9a:	86 bd       	out	0x26, r24	; 38
	CLKPR=0x07; // настройка делителя частоты МК 128
  9c:	87 e0       	ldi	r24, 0x07	; 7
  9e:	86 bd       	out	0x26, r24	; 38
	*/
	
	/************ настройка делителя таймера-счетчика ****************/
	
	
	TCCR0B |= (1<<CS02);  // настраиваем делитель таймера-счетчика. коэффициент деления 256.
  a0:	83 b7       	in	r24, 0x33	; 51
  a2:	84 60       	ori	r24, 0x04	; 4
  a4:	83 bf       	out	0x33, r24	; 51
	TCCR0B &= ~(1<<CS01)|(1<<CS00); // настраиваем делитель таймера-счетчика. коэффициент деления 256.
  a6:	83 b7       	in	r24, 0x33	; 51
  a8:	8d 7f       	andi	r24, 0xFD	; 253
  aa:	83 bf       	out	0x33, r24	; 51
	
		
	TIMSK0 |= (1<<OCIE0A); // разрешаем прерывание по совпадению
  ac:	89 b7       	in	r24, 0x39	; 57
  ae:	84 60       	ori	r24, 0x04	; 4
  b0:	89 bf       	out	0x39, r24	; 57
	OCR0A = comparaisonOCR0A; // в регистр сравнения записываем число позволяющее получить 1 секунду пи совпадении ТС
  b2:	81 e9       	ldi	r24, 0x91	; 145
  b4:	86 bf       	out	0x36, r24	; 54

	WDTCR=0x1F; // сторожевой таймер настроен на 2 секунды
  b6:	8f e1       	ldi	r24, 0x1F	; 31
  b8:	81 bd       	out	0x21, r24	; 33
	WDTCR=0x0F; // сторожевой таймер настроен на 2 секунды
  ba:	8f e0       	ldi	r24, 0x0F	; 15
  bc:	81 bd       	out	0x21, r24	; 33

    x = interval_1; // расчитываем время первого таймра чтобы подать предупредительный сигнал о скором окончании счета первого таймера
	x = x * 97 / 100;
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	90 e4       	ldi	r25, 0x40	; 64
  c2:	aa ed       	ldi	r26, 0xDA	; 218
  c4:	b4 e4       	ldi	r27, 0x44	; 68
  c6:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <x>
  ca:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <x+0x1>
  ce:	a0 93 6c 00 	sts	0x006C, r26	; 0x80006c <x+0x2>
  d2:	b0 93 6d 00 	sts	0x006D, r27	; 0x80006d <x+0x3>
	c = x;
  d6:	82 ed       	ldi	r24, 0xD2	; 210
  d8:	96 e0       	ldi	r25, 0x06	; 6
  da:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <c+0x1>
  de:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <c>
	
	y = interval_2;  // расчитываем время второго таймра чтобы подать предупредительный сигнал о скором окончании счета второго таймера
	y = y * 97 / 100;
  e2:	80 e0       	ldi	r24, 0x00	; 0
  e4:	90 e4       	ldi	r25, 0x40	; 64
  e6:	aa e5       	ldi	r26, 0x5A	; 90
  e8:	b5 e4       	ldi	r27, 0x45	; 69
  ea:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <y>
  ee:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <y+0x1>
  f2:	a0 93 68 00 	sts	0x0068, r26	; 0x800068 <y+0x2>
  f6:	b0 93 69 00 	sts	0x0069, r27	; 0x800069 <y+0x3>
	d = y;
  fa:	84 ea       	ldi	r24, 0xA4	; 164
  fc:	9d e0       	ldi	r25, 0x0D	; 13
  fe:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 102:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 106:	89 ea       	ldi	r24, 0xA9	; 169
 108:	93 e0       	ldi	r25, 0x03	; 3
 10a:	01 97       	sbiw	r24, 0x01	; 1
 10c:	f1 f7       	brne	.-4      	; 0x10a <__stack+0x6b>
 10e:	00 00       	nop
	PORTB |= (1<<PB5); // сигнал запуска устройства
	_delay_ms(pauzaBuzzer); // сигнал запуска устройства
	PORTB &= ~(1<<PB5); // сигнал запуска устройства
	*/
	
	beeper(50);
 110:	82 e3       	ldi	r24, 0x32	; 50
 112:	a7 df       	rcall	.-178    	; 0x62 <beeper>
	
	sei(); // разрешаем глобальное прерывание
 114:	78 94       	sei
	TCNT0 = 0; // регистр счета таймера-счетчика сбрасываем в 0
 116:	12 be       	out	0x32, r1	; 50
 118:	08 95       	ret

0000011a <main>:
/************************* Старт программы МК ************************************/

int main(void)
{
	
	setupMk(); // настройка процессора
 11a:	b2 df       	rcall	.-156    	; 0x80 <setupMk>
	
/************************* Код выпоняется при нажатии первой кнопки, запускается таймер первый ************************************/	
	
		if (~PINB & (1<<PB0) && (PINB & (1<<PB1)) && (a == 0)) // считываем состояние 1-й кнопки, ели она нажата выполняется код
		{
			a = 1; // индикатор однркратного нажатия кнопки 1, для того чтобы код ниже сработал повторно кнопку 1 нужно отпустит и нажать повторно
 11c:	c1 e0       	ldi	r28, 0x01	; 1
			PORTB |= (1<<PB4)|(1<<PB3);
			PORTB &= ~(1<<PB2);
			
			beeper(100); // звук нажатия клавиши 2
			
			ucSwithcVariable = 2; // при нажатии кнопки 2 активируем 60 минутный таймер
 11e:	d2 e0       	ldi	r29, 0x02	; 2
	setupMk(); // настройка процессора
	
    while (1) 
    {
		
	asm("wdr"); // сброс сторожевого таймера
 120:	a8 95       	wdr
	
/************************* Код выпоняется при нажатии первой кнопки, запускается таймер первый ************************************/	
	
		if (~PINB & (1<<PB0) && (PINB & (1<<PB1)) && (a == 0)) // считываем состояние 1-й кнопки, ели она нажата выполняется код
 122:	b0 99       	sbic	0x16, 0	; 22
 124:	15 c0       	rjmp	.+42     	; 0x150 <main+0x36>
 126:	b1 9b       	sbis	0x16, 1	; 22
 128:	13 c0       	rjmp	.+38     	; 0x150 <main+0x36>
 12a:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <a>
 12e:	81 11       	cpse	r24, r1
 130:	0f c0       	rjmp	.+30     	; 0x150 <main+0x36>
		{
			a = 1; // индикатор однркратного нажатия кнопки 1, для того чтобы код ниже сработал повторно кнопку 1 нужно отпустит и нажать повторно
 132:	c0 93 65 00 	sts	0x0065, r28	; 0x800065 <a>
			
			PORTB |= (1<<PB4)|(1<<PB2);
 136:	88 b3       	in	r24, 0x18	; 24
 138:	84 61       	ori	r24, 0x14	; 20
 13a:	88 bb       	out	0x18, r24	; 24
			PORTB &= ~(1<<PB3);
 13c:	c3 98       	cbi	0x18, 3	; 24
			
			beeper(50); // звук нажатия клавиши 1
 13e:	82 e3       	ldi	r24, 0x32	; 50
 140:	90 df       	rcall	.-224    	; 0x62 <beeper>
						
			ucSwithcVariable = 1; // при нажатии кнопки 1 акивируем 30 минутный таймер
 142:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <ucSwithcVariable>
			ui30or60inits = 0;
 146:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <ui30or60inits+0x1>
 14a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <ui30or60inits>
			TCNT0 = 0;
 14e:	12 be       	out	0x32, r1	; 50
			
		}
		
/************************* Код выпоняется при нажатии второй кнопки, запускается таймер второй ************************************/
		
		if ((~PINB & (1<<PB1)) && (PINB & (1<<PB0)) && b == 0) // считываем состояние 2-й кнопки, ели она нажата выполняется код
 150:	b1 99       	sbic	0x16, 1	; 22
 152:	15 c0       	rjmp	.+42     	; 0x17e <main+0x64>
 154:	b0 9b       	sbis	0x16, 0	; 22
 156:	13 c0       	rjmp	.+38     	; 0x17e <main+0x64>
 158:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <b>
 15c:	81 11       	cpse	r24, r1
 15e:	0f c0       	rjmp	.+30     	; 0x17e <main+0x64>
		{
			
			b = 1; // индикатор однркратного нажатия кнопки 2, для того чтобы код ниже сработал повторно кнопку 2 нужно отпустит и нажать повторно
 160:	c0 93 64 00 	sts	0x0064, r28	; 0x800064 <b>
			
			PORTB |= (1<<PB4)|(1<<PB3);
 164:	88 b3       	in	r24, 0x18	; 24
 166:	88 61       	ori	r24, 0x18	; 24
 168:	88 bb       	out	0x18, r24	; 24
			PORTB &= ~(1<<PB2);
 16a:	c2 98       	cbi	0x18, 2	; 24
			
			beeper(100); // звук нажатия клавиши 2
 16c:	84 e6       	ldi	r24, 0x64	; 100
 16e:	79 df       	rcall	.-270    	; 0x62 <beeper>
			
			ucSwithcVariable = 2; // при нажатии кнопки 2 активируем 60 минутный таймер
 170:	d0 93 6f 00 	sts	0x006F, r29	; 0x80006f <ucSwithcVariable>
			ui30or60inits = 0;
 174:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <ui30or60inits+0x1>
 178:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <ui30or60inits>
			TCNT0 = 0;
 17c:	12 be       	out	0x32, r1	; 50
		}
		
/************************* Код выпоняется при нажатии обеих кнопок, остановка обоих таймеров ************************************/
		
		if ((~PINB & (1<<PB1)) && (~PINB & (1<<PB0))) // считываем состояние обеих кнопок, если они нажаты одновременно выполняем код
 17e:	b1 99       	sbic	0x16, 1	; 22
 180:	15 c0       	rjmp	.+42     	; 0x1ac <main+0x92>
 182:	b0 99       	sbic	0x16, 0	; 22
 184:	13 c0       	rjmp	.+38     	; 0x1ac <main+0x92>
		{
			ucWhileStup = 1;
 186:	c0 93 6e 00 	sts	0x006E, r28	; 0x80006e <ucWhileStup>
			
			PORTB &= ~((1<<PB2)|(1<<PB4)|(1<<PB3));  // сбрасываем все порты в 0
 18a:	88 b3       	in	r24, 0x18	; 24
 18c:	83 7e       	andi	r24, 0xE3	; 227
 18e:	88 bb       	out	0x18, r24	; 24
			
			ucSwithcVariable = 0; // отключаем отсчет времени
 190:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <ucSwithcVariable>
			
			while(ucWhileStup) // пока обе кнопки нажаты программа находится в данном цикле не ограниченное время
 194:	06 c0       	rjmp	.+12     	; 0x1a2 <main+0x88>
			{
				if ((PINB & (1<<PB1)) && (PINB & (1<<PB0)))
 196:	b1 9b       	sbis	0x16, 1	; 22
 198:	06 c0       	rjmp	.+12     	; 0x1a6 <main+0x8c>
 19a:	b0 9b       	sbis	0x16, 0	; 22
 19c:	04 c0       	rjmp	.+8      	; 0x1a6 <main+0x8c>
				{
					ucWhileStup = 0;
 19e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <ucWhileStup>
			
			PORTB &= ~((1<<PB2)|(1<<PB4)|(1<<PB3));  // сбрасываем все порты в 0
			
			ucSwithcVariable = 0; // отключаем отсчет времени
			
			while(ucWhileStup) // пока обе кнопки нажаты программа находится в данном цикле не ограниченное время
 1a2:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <ucWhileStup>
 1a6:	81 11       	cpse	r24, r1
 1a8:	f6 cf       	rjmp	.-20     	; 0x196 <main+0x7c>
 1aa:	46 c0       	rjmp	.+140    	; 0x238 <main+0x11e>
			}
		 }

/************************* Сброс флагов однократного нажатия кнопок ************************************/

		if ((PINB & (1<<PB1)) && (PINB & (1<<PB0))) // если обе конопки отпущены индикаторы однократного нажатия кнопок сбрасываются в 0
 1ac:	b1 9b       	sbis	0x16, 1	; 22
 1ae:	06 c0       	rjmp	.+12     	; 0x1bc <main+0xa2>
 1b0:	b0 9b       	sbis	0x16, 0	; 22
 1b2:	04 c0       	rjmp	.+8      	; 0x1bc <main+0xa2>
		{
			a = 0;
 1b4:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <a>
			b = 0;
 1b8:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <b>
		}

/************************* По данному коду выполняется остановка первого таймера ************************************/		
		
		if (ucSwithcVariable == 1) // данный участок кода отвечает за остановку первого таймера
 1bc:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <ucSwithcVariable>
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	d1 f4       	brne	.+52     	; 0x1f8 <main+0xde>
		{			
						
			if (ui30or60inits >= interval_1) // проверяем переменную на равенство первому временному интервалу
 1c4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <ui30or60inits>
 1c8:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <ui30or60inits+0x1>
 1cc:	88 30       	cpi	r24, 0x08	; 8
 1ce:	27 e0       	ldi	r18, 0x07	; 7
 1d0:	92 07       	cpc	r25, r18
 1d2:	a8 f1       	brcs	.+106    	; 0x23e <main+0x124>
			{	
				ucSwithcVariable = 0; // останавливаем счет
 1d4:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <ucSwithcVariable>
				
				PORTB &= ~((1<<PB2)|(1<<PB4)|(1<<PB3)); // сбрасываем все порты в 0
 1d8:	88 b3       	in	r24, 0x18	; 24
 1da:	83 7e       	andi	r24, 0xE3	; 227
 1dc:	88 bb       	out	0x18, r24	; 24
			}
			
			
			
			if (ui30or60inits == c) // если время первого таймера закончилось на 97% звучит предупредительный зуммер
 1de:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <ui30or60inits>
 1e2:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <ui30or60inits+0x1>
 1e6:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <c>
 1ea:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <c+0x1>
 1ee:	28 17       	cp	r18, r24
 1f0:	39 07       	cpc	r19, r25
 1f2:	11 f4       	brne	.+4      	; 0x1f8 <main+0xde>
			{
				beeper(50); // предупредительный зуммер об окончании таймера 1
 1f4:	82 e3       	ldi	r24, 0x32	; 50
 1f6:	35 df       	rcall	.-406    	; 0x62 <beeper>
			
		}
		
/************************* По данному коду выполняется остановка второго таймера ************************************/
		
		if (ucSwithcVariable == 2) // данный участок кода отвечает за остановку второго таймера
 1f8:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <ucSwithcVariable>
 1fc:	82 30       	cpi	r24, 0x02	; 2
 1fe:	09 f0       	breq	.+2      	; 0x202 <main+0xe8>
 200:	8f cf       	rjmp	.-226    	; 0x120 <main+0x6>
		{
									
			if (ui30or60inits >= interval_2) // проверяем переменную на равенство второму временному интервалу
 202:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <ui30or60inits>
 206:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <ui30or60inits+0x1>
 20a:	80 31       	cpi	r24, 0x10	; 16
 20c:	9e 40       	sbci	r25, 0x0E	; 14
 20e:	28 f0       	brcs	.+10     	; 0x21a <main+0x100>
			{
				
				ucSwithcVariable = 0; // останавливаем счет
 210:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <ucSwithcVariable>
				
				PORTB &= ~((1<<PB2)|(1<<PB4)|(1<<PB3)); // сбрасываем все порты в 0
 214:	88 b3       	in	r24, 0x18	; 24
 216:	83 7e       	andi	r24, 0xE3	; 227
 218:	88 bb       	out	0x18, r24	; 24
			}
			
			if (ui30or60inits == d) // если время второго таймера закончилось на 97% звучит предупредительный зуммер
 21a:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <ui30or60inits>
 21e:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <ui30or60inits+0x1>
 222:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 226:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 22a:	28 17       	cp	r18, r24
 22c:	39 07       	cpc	r19, r25
 22e:	09 f0       	breq	.+2      	; 0x232 <main+0x118>
 230:	77 cf       	rjmp	.-274    	; 0x120 <main+0x6>
			{
				beeper(50); // предупредительный зуммер об окончании таймера 2
 232:	82 e3       	ldi	r24, 0x32	; 50
 234:	16 df       	rcall	.-468    	; 0x62 <beeper>
 236:	74 cf       	rjmp	.-280    	; 0x120 <main+0x6>
			}
		 }

/************************* Сброс флагов однократного нажатия кнопок ************************************/

		if ((PINB & (1<<PB1)) && (PINB & (1<<PB0))) // если обе конопки отпущены индикаторы однократного нажатия кнопок сбрасываются в 0
 238:	b1 99       	sbic	0x16, 1	; 22
 23a:	0a c0       	rjmp	.+20     	; 0x250 <main+0x136>
 23c:	71 cf       	rjmp	.-286    	; 0x120 <main+0x6>
				PORTB &= ~((1<<PB2)|(1<<PB4)|(1<<PB3)); // сбрасываем все порты в 0
			}
			
			
			
			if (ui30or60inits == c) // если время первого таймера закончилось на 97% звучит предупредительный зуммер
 23e:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <c>
 242:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <c+0x1>
 246:	82 17       	cp	r24, r18
 248:	93 07       	cpc	r25, r19
 24a:	09 f0       	breq	.+2      	; 0x24e <main+0x134>
 24c:	69 cf       	rjmp	.-302    	; 0x120 <main+0x6>
 24e:	d2 cf       	rjmp	.-92     	; 0x1f4 <main+0xda>
			}
		 }

/************************* Сброс флагов однократного нажатия кнопок ************************************/

		if ((PINB & (1<<PB1)) && (PINB & (1<<PB0))) // если обе конопки отпущены индикаторы однократного нажатия кнопок сбрасываются в 0
 250:	b0 99       	sbic	0x16, 0	; 22
 252:	b0 cf       	rjmp	.-160    	; 0x1b4 <main+0x9a>
 254:	d1 cf       	rjmp	.-94     	; 0x1f8 <main+0xde>

00000256 <_exit>:
 256:	f8 94       	cli

00000258 <__stop_program>:
 258:	ff cf       	rjmp	.-2      	; 0x258 <__stop_program>
